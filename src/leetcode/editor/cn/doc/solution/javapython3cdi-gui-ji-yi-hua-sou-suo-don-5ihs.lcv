> [1690. 石子游戏 VII](https://leetcode.cn/problems/stone-game-vii/)

[TOC]

# 题目

石子游戏中，爱丽丝和鲍勃轮流进行自己的回合，**爱丽丝先开始** 。

有 `n` 块石子排成一排。每个玩家的回合中，可以从行中 **移除** 最左边的石头或最右边的石头，并获得与该行中剩余石头值之 **和** 相等的得分。当没有石头可移除时，得分较高者获胜。

鲍勃发现他总是输掉游戏（可怜的鲍勃，他总是输），所以他决定尽力 **减小得分的差值** 。爱丽丝的目标是最大限度地 **扩大得分的差值** 。

给你一个整数数组 `stones` ，其中 `stones[i]` 表示 **从左边开始** 的第 `i` 个石头的值，如果爱丽丝和鲍勃都 **发挥出最佳水平** ，请返回他们 **得分的差值** 。

# 题目分析

> 参考 [《教你一步步思考动态规划：从记忆化搜索到递推（Python/Java/C++/Go/JS/Rust）》—— 灵茶山艾府题解](https://leetcode.cn/problems/stone-game-vii/solutions/2629582/jiao-ni-yi-bu-bu-si-kao-dong-tai-gui-hua-zktx/?envType=daily-question&envId=2024-02-03)

## 思路分析

这道题是对游戏的模拟。其得分策略是：移除当前区间 `[i, j]` 两端的某个数，则可以获得剩下元素和这么多的得分。两个人交替进行，直到没有元素可操作，或者说直到**只剩下一个元素**【如果 `[i, j]` 只有一个元素，即 `i = j`，只能移走这个元素，则剩下元素和为 `0`，得分没有变化】

很容易想到通过贪心的策略，我们每次移除左右两端最小的元素，剩下的元素和就肯定大。但是同昨天的题（[1686.石子游戏VI]()）一样，每个玩家的操作**不仅是要让自己的得分高，还要让对手的得分不高**。你现在剩下的元素和大了，那下一回合对手操作是它剩下的元素和肯定也大了，因此这个思路是不行的。

对于区间 `[i, j]`，假设当前是 `A`（爱丽丝） 的回合，她有两种选择：

- 移除 `i`，得分为 `sum(i+1, j)`，然后剩下的区间 `[i+1, j]` 假设其还能得分 `scoreA'`，对手还能得分 `scoreB'`。那么区间 `[i, j]` 上 `A` 可以得分 `scoreA = sum(i+1, j) + scoreA'`。而这一轮 `B` 不得分，区间 `[i, j]` 上的得分为 `scoreB = 0 + scoreB'`。
- 移除 `j`，得分为 `sum(i, j-1)`， 然后剩下的区间 `[i, j-1]` 假设其还能得分 `scoreA''`，对手还能得分 `scoreB''`。那么区间 `[i, j]` 上 `A` 可以得分 `scoreA = sum(i, j-1) + scoreA''`。而这一轮 `B` 不得分，区间 `[i, j]` 上的得分为 `scoreB = 0 + scoreB''`。

`A` 应该选择自己得分高 —— `scoreA` 大，且对手得分低 —— `scoreB` 小，即 `-scoreB` 大的那一步，综合起来就是选择 `scoreA - scoreB` 大，得分差更大的。

## 递归 + 记忆化搜索

### 递归

从暴力的角度出发：每次每个玩家有两种选择，我们可以用递归 + 回溯的方式去模拟所有的选择情况，然后每次返回在区间 `[i, j]` 上两个玩家的得分。

但我们要求的是两个玩家的得分差，而且我们每次也是根据得分差去进行选择的，那么我们是否可以以得分差作为状态值进行操作呢？

![image-20240203184429557.png](https://pic.leetcode.cn/1706958616-GyEqDo-image-20240203184429557.png)

因此我们可以将每次返回区间 `[i, j]` 上两个玩家的得分，变成返回**这一回合操作玩家与非操作玩家的得分差**，同样能够保证玩家以最优的策略进行操作。

### 记忆化搜索

![image-20240203185456690.png](https://pic.leetcode.cn/1706958551-RdpYOS-image-20240203185456690.png)

因此我们可以适用一个数组 `memo[i][j]` 来存储区间 `[i, j]` 的最大得分差：

- `memo[i][j]` 没有值，首次处理这段区间，正常递归；
- 否则，已经处理过这段区间，直接返回存储的值；

最终结果就是递归入口 `memo[0][n-1]`。

## 动态规划

递归的过程其实也是一个动态规划的过程，`memo[i][j]` 的状态取决于 `sum(i+1, j) - memo[i+1][j]` 和 `sum(i, j-1) - memo[i][j-1]` 的状态，因此我们可以得到状态转移公式：

* 

```
memo[i][j] = max(sum(i+1, j) - memo[i+1][j], sum(i, j-1) - memo[i][j-1])
```

递归的终点是 ` i = j`，则动态规划的起点是 `j = i`，即从小区间往大区间转移：

- 对于 `i` 来说，需要从 `i + 1` 的状态转移，因此 `i` 应该逆序遍历，先生成数值更大的 `i` 的状态；

- 同理，对于 `j` 来说，需要从 `j - 1`的状态转移，因此 `j` 应该正序遍历，先得到数值更大的 `j` 的状态。

- 由于涉及到 `i + 1` 和 `j - 1` 的状态，为了**避免索引越界**，需要对边界值进行判断：

  ![image-20240203190702593.png](https://pic.leetcode.cn/1706958551-uixDOD-image-20240203190702593.png)

## 前缀和

`sum(i, j)` 表示区间 `(i, j)` 的元素和，通过前缀和可以快速得到任意区间的元素和。

![image-20240203185604421.png](https://pic.leetcode.cn/1706958551-HQmgnd-image-20240203185604421.png)

# 代码

## 递归 + 记忆化搜索

* []

```Java
class Solution {
    private int[][] memo;
    private int[] preSum;
    
    public int stoneGameVII(int[] stones) {
        int n = stones.length;
        // memo[i][j]表示当前操作区间[i, j]的玩家与另一玩家的得分差
        memo = new int[n][n];
        // 前缀和，preSum[i]表示stones [0, i)的元素和
        preSum = new int[n+1];    
        for(int i = 1; i < n + 1; i++){
            preSum[i] = preSum[i - 1] + stones[i-1];
        }

        dfs(0, n - 1);  // 初始从区间 [0, n-1] 开始进行操作
        return memo[0][n-1];    // 返回 [0, n-1]的结果
    }

    private void dfs(int i, int j){
        // 移除i，对区间[i+1, j]进行搜索，且仅当区间有效且未搜索时搜索
        if(i + 1 != j && memo[i+1][j] == 0)
            dfs(i + 1, j);
        // 移除j，对区间[i, j-1]进行搜索，且仅当区间有效且未搜索时搜索
        if(i != j - 1 && memo[i][j-1] == 0)
            dfs(i, j - 1);
        
        // 选择得分差更大的
        memo[i][j] = Math.max(preSum[j+1] - preSum[i+1] - memo[i+1][j], preSum[j] - preSum[i] - memo[i][j-1]); 
    }
}
```

* []

```Python
class Solution:
    def stoneGameVII(self, stones: List[int]) -> int:
        def dfs(i: int, j: int) -> int:
            # 移除i，对区间[i+1, j]进行搜索，且仅当区间有效且未搜索时搜索
            if i + 1 != j and memo[i+1][j] == 0:
                dfs(i + 1, j)
            # 移除j，对区间[i, j-1]进行搜索，且仅当区间有效且未搜索时搜索
            if i != j - 1 and memo[i][j-1] == 0:
                dfs(i, j - 1)
            # 选择得分差更大的
            memo[i][j] = max(presum[j+1] - presum[i+1] - memo[i+1][j], presum[j] - presum[i] - memo[i][j-1])

        n = len(stones)
        # memo[i][j]表示当前操作区间[i, j]的玩家与另一玩家的得分差
        memo = [ [0]*n for _ in range(n)]
        # 前缀和，presum[i]表示stones [0, i)的元素和
        presum = [0]
        for i, s in enumerate(stones):
            presum.append(presum[-1] + s)   

        dfs(0, n - 1);  # 初始从区间 [0, n-1] 开始进行操作
        return memo[0][n-1];    # 返回 [0, n-1]的结果
```

* []

```C++
class Solution {
public:
    int stoneGameVII(vector<int>& stones) {
        int n = stones.size();
        // memo[i][j]表示当前操作区间[i, j]的玩家与另一玩家的得分差
        vector<vector<int>> memo(n, vector<int>(n));
        // 前缀和，preSum[i]表示stones [0, i)的元素和
        vector<int> preSum(n+1);
        for(int i = 1; i < n + 1; i++){
            preSum[i] = preSum[i - 1] + stones[i-1];
        }
        
        // 递归搜索函数
        function<int(int, int)> dfs = [&](int i, int j){
            // if(i == j)return;
             // 移除i，对区间[i+1, j]进行搜索，且仅当区间有效且未搜索时搜索
            if(i + 1 != j && memo[i+1][j] == 0)
                dfs(i + 1, j);
            // 移除j，对区间[i, j-1]进行搜索，且仅当区间有效且未搜索时搜索
            if(i != j - 1 && memo[i][j-1] == 0)
                dfs(i, j - 1);
             // 选择得分差更大的
            memo[i][j] = max(preSum[j+1] - preSum[i+1] - memo[i+1][j], preSum[j] - preSum[i] - memo[i][j-1]);
        };
        
        dfs(0, n - 1);  // 初始从区间 [0, n-1] 开始进行操作
        return memo[0][n-1];    // 返回 [0, n-1]的结果
    }
};
```

## 动态规划

* []

```Java
class Solution {
    public int stoneGameVII(int[] stones) {
        int n = stones.length;
        // dp[i][j]表示当前操作区间[i, j]的玩家与另一玩家的得分差
        int[][] dp = new int[n][n];
        // 前缀和，preSum[i]表示stones [0, i)的元素和
        int[] preSum = new int[n+1];    
        for(int i = 1; i < n + 1; i++){
            preSum[i] = preSum[i - 1] + stones[i-1];
        }

        // 当i=n-1时，[i, j]区间合法只有[n-1,n-1]这一种情况，得分都为0，得分差也一定为0；这个情况不枚举处理，避免i+1越界
        // 当j=i时，[i,j]区间得分都为0，得分差也一定为0；这个情况不处理，避免j=i=0时，j-1越界
        for(int i = n-2; i >= 0; i--){
            for(int j = i + 1; j < n; j++){
                dp[i][j] = Math.max(preSum[j+1] - preSum[i+1] - dp[i+1][j], preSum[j] - preSum[i] - dp[i][j-1]);  
            }
        }

        return dp[0][n-1];    // 返回 [0, n-1]的结果
    }
}
```

* []

```Python
class Solution:
    def stoneGameVII(self, stones: List[int]) -> int:
        n = len(stones)
        # dp[i][j]表示当前操作区间[i, j]的玩家与另一玩家的得分差
        dp = [ [0]*n for _ in range(n)]
        # 前缀和，presum[i]表示stones [0, i)的元素和
        presum = [0]
        for i, s in enumerate(stones):
            presum.append(presum[-1] + s)   
        
        # 当i=n-1时，[i, j]区间合法只有[n-1,n-1]这一种情况，得分都为0，得分差也一定为0；这个情况不枚举处理，避免i+1越界
        # 当j=i时，[i,j]区间得分都为0，得分差也一定为0；这个情况不处理，避免j=i=0时，j-1越界
        for i in range(n -2, -1, -1):
            for j in range(i + 1, n):
                dp[i][j] = max(presum[j+1] - presum[i+1] - dp[i+1][j], presum[j] - presum[i] - dp[i][j-1]);  

        return dp[0][n-1]    # 返回 [0, n-1]的结果
```

* []

```C++
class Solution {
public:
    int stoneGameVII(vector<int>& stones) {
        int n = stones.size();
        // dp[i][j]表示当前操作区间[i, j]的玩家与另一玩家的得分差
        vector<vector<int>> dp(n, vector<int>(n));
        // 前缀和，preSum[i]表示stones [0, i)的元素和
        vector<int> preSum(n+1);
        for(int i = 1; i < n + 1; i++){
            preSum[i] = preSum[i - 1] + stones[i-1];
        }
        
        // 当i=n-1时，[i, j]区间合法只有[n-1,n-1]这一种情况，得分都为0，得分差也一定为0；这个情况不枚举处理，避免i+1越界
        // 当j=i时，[i,j]区间得分都为0，得分差也一定为0；这个情况不处理，避免j=i=0时，j-1越界
        for(int i = n-2; i >= 0; i--){
            for(int j = i + 1; j < n; j++){
                dp[i][j] = max(preSum[j+1] - preSum[i+1] - dp[i+1][j], preSum[j] - preSum[i] - dp[i][j-1]);  
            }
        }

        return dp[0][n-1];    // 返回 [0, n-1]的结果
    }
};
```

## 递归 + 记忆化搜索（直接记录得分版）

记录一下自己最开始的思路，`memo[i][j]` 记录的是 `A` 和 `B` 的得分，而不是得分差。**需要额外的一维空间来记录两个得分**。

感谢[@灵茶山艾府](/u/endlesscheng) 提供 `array<int, 2>` 的优化方法。

* []

```Java
class Solution {
    private int[][][] memo;
    private int[] preSum;
    
    public int stoneGameVII(int[] stones) {
        int n = stones.length;
        // memo[i][j] = {scoreA, scoreB} 表示爱丽丝和鲍尔在 [i, j] 各自的最大得分
        memo = new int[n][n][2];
        // 前缀和，preSum[i]表示stones [0, i)的元素和
        preSum = new int[n+1];    
        for(int i = 1; i < n + 1; i++){
            preSum[i] = preSum[i - 1] + stones[i-1];
        }

        dfs(0, n - 1, 0);   // 初始爱丽丝（0）对区间 [0, n-1] 进行操作
        return memo[0][n-1][0] - memo[0][n-1][1];   // 返回 [0, n-1]的得分差
    }
	
    // 递归搜索函数，表示当前player对区间 [i, j] 进行操作
    private void dfs(int i, int j, int player){
        // 移除i，对区间[i+1, j]进行搜索，且仅当区间有效且未搜索时搜索
        if(i + 1 != j && memo[i+1][j][player^1] == 0)
            dfs(i + 1, j, player ^ 1);
        // 移除j，对区间[i, j-1]进行搜索，且仅当区间有效且未搜索时搜索
        if(i != j - 1 && memo[i][j-1][player^1] == 0)
            dfs(i, j - 1, player ^ 1);
        // 不同转移的A的最大得分
        int score1 = preSum[j+1] - preSum[i+1] + memo[i+1][j][player];  
        int score2 = preSum[j] - preSum[i] + memo[i][j-1][player];
        // 根据scoreA - scoreB' 的大小进行判断
        if(score1 - memo[i+1][j][player ^ 1] > score2 - memo[i][j-1][player ^ 1]){
            memo[i][j][player] = score1;
            memo[i][j][player ^ 1] =  memo[i+1][j][player ^ 1];
        }else{
            memo[i][j][player] = score2;
            memo[i][j][player ^ 1] =  memo[i][j-1][player ^ 1];
        }
    }
}

```

* []

```Python
class Solution:
    def stoneGameVII(self, stones: List[int]) -> int:
        # 递归搜索函数，表示当前player对区间 [i, j] 进行操作
        def dfs(i: int, j: int, player: int) -> int:
            # 移除i，对区间[i+1, j]进行搜索，且仅当区间有效且未搜索时搜索
            if i + 1 != j and memo[i+1][j][player^1] == 0:
                dfs(i + 1, j, player ^ 1)
            # 移除j，对区间[i, j-1]进行搜索，且仅当区间有效且未搜索时搜索
            if i != j - 1 and memo[i][j-1][player^1] == 0:
                dfs(i, j - 1, player ^ 1)
            # 不同转移的A的最大得分
            score1 = presum[j+1] - presum[i+1] + memo[i+1][j][player]  
            score2 = presum[j] - presum[i] + memo[i][j-1][player]
            # 根据scoreA - scoreB' 的大小进行判断
            if score1 - memo[i+1][j][player ^ 1] > score2 - memo[i][j-1][player ^ 1]:
                memo[i][j][player] = score1
                memo[i][j][player ^ 1] =  memo[i+1][j][player ^ 1]
            else:
                memo[i][j][player] = score2
                memo[i][j][player ^ 1] =  memo[i][j-1][player ^ 1]

        n = len(stones)
        # memo[i][j] = {scoreA, scoreB} 表示爱丽丝和鲍尔在 [i, j] 各自的最大得分
        memo = [[[0, 0] for _ in range(n)]for _ in range(n)]
        # 前缀和，presum[i]表示stones [0, i)的元素和
        presum = [0]
        for i, s in enumerate(stones):
            presum.append(presum[-1] + s)   

        dfs(0, n - 1, 0)   # 初始爱丽丝（0）对区间 [0, n-1] 进行操作
        return memo[0][n-1][0] - memo[0][n-1][1]   # 返回 [0, n-1]的得分差
```

* []

```C++
class Solution {
public:
    int stoneGameVII(vector<int>& stones) {
        int n = stones.size();
        // memo[i][j] = {scoreA, scoreB} 表示爱丽丝和鲍尔在 [i, j] 各自的最大得分
        vector<vector<array<int, 2>>> memo(n, vector<array<int, 2>>(n));
        // 前缀和，preSum[i]表示stones [0, i)的元素和
        vector<int> preSum(n+1);    
        for(int i = 1; i < n + 1; i++){
            preSum[i] = preSum[i - 1] + stones[i-1];
        }

        // 递归搜索函数，表示当前player对区间 [i, j] 进行操作
        function<void(int, int, int)> dfs = [&](int i, int j, int player){
            // 移除i，对区间[i+1, j]进行搜索，且仅当区间有效且未搜索时搜索
            if(i + 1 != j && memo[i+1][j][player^1] == 0)
                dfs(i + 1, j, player ^ 1);
            // 移除j，对区间[i, j-1]进行搜索，且仅当区间有效且未搜索时搜索
            if(i != j - 1 && memo[i][j-1][player^1] == 0)
                dfs(i, j - 1, player ^ 1);
            // 不同转移的A的最大得分
            int score1 = preSum[j+1] - preSum[i+1] + memo[i+1][j][player];  
            int score2 = preSum[j] - preSum[i] + memo[i][j-1][player];
            // 根据scoreA - scoreB' 的大小进行判断
            if(score1 - memo[i+1][j][player ^ 1] > score2 - memo[i][j-1][player ^ 1]){
                memo[i][j][player] = score1;
                memo[i][j][player ^ 1] =  memo[i+1][j][player ^ 1];
            }else{
                memo[i][j][player] = score2;
                memo[i][j][player ^ 1] =  memo[i][j-1][player ^ 1];
            }
        };
        
        dfs(0, n - 1, 0);   // 初始爱丽丝（0）对区间 [0, n-1] 进行操作
        return memo[0][n-1][0] - memo[0][n-1][1];   // 返回 [0, n-1]的得分差
    }
};
```

