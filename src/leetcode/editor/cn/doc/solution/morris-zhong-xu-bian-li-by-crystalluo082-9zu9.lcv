> Problem: [94. 二叉树的中序遍历](https://leetcode.cn/problems/binary-tree-inorder-traversal/description/)

[TOC]

# 解题方法

> 1、初始化当前节点为根节点。
> 2、如果当前节点的左子节点为空，则输出当前节点的值，并将当前节点更新为其右子节点。
> 3、如果当前节点的左子节点不为空，则找到其左子树的最右边的节点（即当前节点的中序遍历前驱节点）。
> ——如果最右边节点的右子节点为空，将其右子节点指向当前节点，然后将当前节点更新为其左子节点。
> ——如果最右边节点的右子节点指向当前节点（即已经访问过了），将其右子节点恢复为空，输出当前节点的值，然后将当前节点更新为其右子节点。
> 4、重复步骤 2 和步骤 3，直到当前节点为空。

# 复杂度

时间复杂度:

> $O(n)$

空间复杂度:

> $O(1)$

# Code

* []

```C++
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        TreeNode* current = root;
        TreeNode* predecessor;
        
        while (current != nullptr) {
            if (current->left == nullptr) {
                res.push_back(current->val);
                current = current->right;
            } else {
                // 找到当前节点的中序遍历前驱节点
                predecessor = current->left;
                while (predecessor->right != nullptr && predecessor->right != current) {
                    predecessor = predecessor->right;
                }
                
                if (predecessor->right == nullptr) {
                    // 将前驱节点的右子节点指向当前节点，然后继续遍历左子树
                    predecessor->right = current;
                    current = current->left;
                } else {
                    // 恢复树的原始结构，输出当前节点的值，然后继续遍历右子树
                    predecessor->right = nullptr;
                    res.push_back(current->val);
                    current = current->right;
                }
            }
        }
        
        return res;
    }
};
```

